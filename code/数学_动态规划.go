package code

// MyIsPalindrome /*****************************9.回文数start******************************/
// 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
// 示例 1:
// 输入: 121
// 输出: true
// 示例2:
// 输入: -121
// 输出: false
// 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
// 示例 3:
// 输入: 10
// 输出: false
// 解释: 从右向左读, 为 01 。因此它不是一个回文数
// */
func MyIsPalindrome(x int) bool {
	// 负数翻转不会相同,直接pass
	if x < 0 {
		return false
	}

	//弹出最后一位数,每次都乘10,组成新int
	var newX, tmp, oldX int
	oldX = x
	for x != 0 {
		tmp = x % 10
		newX = newX*10 + tmp
		x = x / 10
	}

	return newX == oldX
}

/*****************************9.回文数end******************************/

/*****************************69.求x的算术平方根******************************/
/*
给你一个非负整数 x ，计算并返回 x 的 算术平方根 。
由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。
注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。

示例 1：

输入：x = 4
输出：2
示例 2：

输入：x = 8
输出：2
解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。
*/
func mySqrt(x int) int {
	if x == 0 {
		return 0
	}

	left, right := 1, x
	for {
		mid := left + (right-left)/2
		if mid > x/mid {
			right = mid - 1
		} else {
			if mid+1 > x/(mid+1) {
				return mid
			}
			left = mid + 1
		}
	}
}

/*****************************69.求x的算术平方根******************************/

/*****************************70.爬楼梯******************************/
/*
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

示例 1：
	输入：n = 2
	输出：2
	解释：有两种方法可以爬到楼顶。
	1. 1 阶 + 1 阶
	2. 2 阶

示例 2：
	输入：n = 3
	输出：3
	解释：有三种方法可以爬到楼顶。
	1. 1 阶 + 1 阶 + 1 阶
	2. 1 阶 + 2 阶
	3. 2 阶 + 1 阶

1 <= n <= 45
*/
//func climbStairs(x int) int {
//
//}

/*****************************70.爬楼梯******************************/
